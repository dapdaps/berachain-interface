import { AnimatePresence, motion, useInView } from 'framer-motion';
import React, { useMemo, useRef, useState } from 'react';

const LazyImage = (props: Props) => {
  const {
    src,
    alt,
    fallbackSrc,
    width,
    height,
    containerStyle,
    containerClassName,
    style,
    className,
    delay = 0,
    ...restProps
  } = props;

  const containerRef = useRef<HTMLDivElement>(null);

  const isInView = useInView(containerRef, { once: true });

  const [isLoaded, setLoaded] = useState(false);

  const renderFallback = useMemo(() => {
    if (typeof fallbackSrc === 'string') {
      return <img src={fallbackSrc} alt={alt ?? ''} style={style} />;
    }
    if (fallbackSrc) {
      return <>{fallbackSrc}</>;
    }
    return DapDapLogo;
  }, [fallbackSrc]);

  return (
    <motion.div
      {...restProps}
      ref={containerRef}
      className={`relative w-full h-full ${containerClassName}`}
      style={{
        width,
        height,
        ...containerStyle
      }}
    >
      <AnimatePresence mode="wait">
        {isInView && (
          <motion.img
            key="real-image"
            src={src}
            alt={alt ?? ''}
            style={style}
            className={`real-image w-full h-full ${className}`}
            variants={{
              hidden: { opacity: 0 },
              visible: { opacity: 1 }
            }}
            animate={isLoaded ? 'visible' : 'hidden'}
            exit="hidden"
            initial="hidden"
            transition={{ duration: 0.3, ease: 'easeInOut', delay: delay }}
            onLoad={() => {
              setLoaded(true);
            }}
            onError={(e) => {
              console.log('LazyImage caught the error: %o, src: %s', e, src);
            }}
          />
        )}
        {(!isInView || !isLoaded) && (
          <motion.div
            key="fallback-image"
            className="absolute z-[1] left-0 top-0 w-full h-full flex justify-center items-center"
            variants={{
              hidden: {
                opacity: 0,
                transition: {
                  duration: 0.3,
                  ease: 'easeInOut'
                }
              },
              visible: {
                opacity: 1,
                transition: {
                  duration: 0
                }
              }
            }}
            animate="visible"
            exit="hidden"
            initial="visible"
          >
            {renderFallback}
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

export default LazyImage;

export interface Props {
  src: string;
  fallbackSrc?: string | React.ReactNode;
  alt?: string;
  width?: number;
  height?: number;
  className?: string;
  containerClassName?: string;
  style?: React.CSSProperties;
  containerStyle?: React.CSSProperties;
  delay?: number;

  [k: string]: any;
}

const DapDapLogo = (
  <svg key="fallback-image" width="121" height="33" viewBox="0 0 121 33" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g opacity="0.1">
      <path
        d="M1.91839 15.6483C1.39153 13.3488 3.87506 7.45045 3.87506 7.45045L17.178 6.56635C19.7509 5.87693 22.3955 7.40382 23.0849 9.97673L28.7103 19.2472C27.806 23.7688 27.0567 26.3322 24.4837 27.0216L11.0003 30.9079C8.42742 31.5973 5.78278 30.0704 5.09337 27.4975L1.91839 15.6483Z"
        fill="#979ABE"
      />
      <path
        d="M3.5883 10.6386C2.8783 7.98887 4.45079 5.26525 7.10054 4.55525L19.3036 1.28545C21.9534 0.575446 24.677 2.14793 25.387 4.79769L28.6568 17.0008C29.3668 19.6505 27.7943 22.3741 25.1446 23.0841L12.9415 26.3539C10.2917 27.0639 7.56811 25.4915 6.85811 22.8417L3.5883 10.6386Z"
        fill="black"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M19.625 2.4849L7.42193 5.7547C5.43462 6.2872 4.25525 8.32992 4.78775 10.3172L8.05756 22.5203C8.59006 24.5076 10.6328 25.687 12.6201 25.1545L24.8232 21.8847C26.8105 21.3522 27.9899 19.3095 27.4574 17.3222L24.1875 5.11908C23.655 3.13176 21.6123 1.9524 19.625 2.4849ZM7.10054 4.55525C4.45079 5.26525 2.8783 7.98887 3.5883 10.6386L6.85811 22.8417C7.56811 25.4915 10.2917 27.0639 12.9415 26.3539L25.1446 23.0841C27.7943 22.3741 29.3668 19.6505 28.6568 17.0008L25.387 4.79769C24.677 2.14793 21.9534 0.575446 19.3036 1.28545L7.10054 4.55525Z"
        fill="#979ABE"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M15.0454 7.9507L11.7892 8.82321C11.2557 8.96615 10.9391 9.51449 11.0821 10.048L11.4412 11.3883C11.5841 11.9217 12.1325 12.2383 12.6659 12.0954L15.6242 11.3027C16.7112 11.0114 17.8286 11.6565 18.1199 12.7436C18.4112 13.8307 17.7661 14.948 16.679 15.2393L13.7208 16.032C13.1873 16.1749 12.8707 16.7233 13.0136 17.2567L13.3879 18.6533C13.5308 19.1868 14.0791 19.5034 14.6126 19.3604L17.8689 18.4879C20.7786 17.7083 22.5054 14.7174 21.7258 11.8076C20.9461 8.89782 17.9552 7.17103 15.0454 7.9507Z"
        fill="#979ABE"
      />
      <path
        d="M38 7H43.8653C45.2777 7 46.5266 7.28117 47.6121 7.84351C48.7106 8.40584 49.5606 9.1905 50.1622 10.1975C50.7768 11.2045 51.0842 12.3553 51.0842 13.65C51.0842 15.01 50.7834 16.2066 50.1818 17.2398C49.5933 18.2729 48.7498 19.0772 47.6513 19.6526C46.5658 20.2149 45.3039 20.4961 43.8653 20.4961H38V7ZM43.6692 16.9652C44.65 16.9652 45.3954 16.6578 45.9054 16.0432C46.4285 15.4155 46.6901 14.6046 46.6901 13.6107C46.6901 12.6692 46.4351 11.9237 45.925 11.3745C45.4281 10.8121 44.6761 10.531 43.6692 10.531H42.3352V16.9652H43.6692Z"
        fill="#979ABE"
      />
      <path
        d="M57.0215 20.653C56.1715 20.653 55.3737 20.4307 54.6283 19.9861C53.896 19.5284 53.3075 18.9137 52.8628 18.1421C52.4182 17.3575 52.1959 16.4878 52.1959 15.5332C52.1959 14.5916 52.4182 13.7415 52.8628 12.983C53.3075 12.2114 53.9025 11.6099 54.6479 11.1783C55.3933 10.7467 56.1845 10.531 57.0215 10.531C57.7015 10.531 58.3293 10.7206 58.9047 11.0998C59.4932 11.4791 59.9378 12.048 60.2386 12.8065V10.531H64.3581V20.4961H60.2386V18.6718C59.5847 19.9926 58.5124 20.653 57.0215 20.653ZM58.2966 17.5536C58.8197 17.5536 59.2643 17.3706 59.6305 17.0044C60.0097 16.6251 60.2125 16.1805 60.2386 15.6705V15.5135C60.2125 14.9904 60.0032 14.5458 59.6109 14.1796C59.2316 13.8134 58.7935 13.6304 58.2966 13.6304C57.7473 13.6304 57.2765 13.8265 56.8842 14.2189C56.5049 14.5981 56.3153 15.0558 56.3153 15.592C56.3153 16.1413 56.5115 16.6055 56.9038 16.9848C57.2961 17.364 57.7604 17.5536 58.2966 17.5536Z"
        fill="#979ABE"
      />
      <path
        d="M66.345 10.8056H70.4841V12.5122C71.1118 11.1914 72.1776 10.531 73.6815 10.531C74.5577 10.531 75.362 10.7533 76.0944 11.1979C76.8398 11.6295 77.4217 12.2311 77.8402 13.0026C78.2718 13.7742 78.4876 14.6373 78.4876 15.592C78.4876 16.5467 78.2652 17.4098 77.8206 18.1814C77.389 18.953 76.8005 19.5611 76.0551 20.0057C75.3228 20.4373 74.5381 20.653 73.7011 20.653C72.2103 20.653 71.1379 19.9926 70.4841 18.6718V23.0462L66.345 23.8309V10.8056ZM72.4457 17.5536C72.9819 17.5536 73.4396 17.3575 73.8189 16.9652C74.1981 16.5728 74.3877 16.1151 74.3877 15.592C74.3877 15.0427 74.1916 14.5785 73.7992 14.1992C73.42 13.82 72.9688 13.6304 72.4457 13.6304C71.9095 13.6304 71.4518 13.82 71.0725 14.1992C70.6933 14.5654 70.5037 15.0035 70.5037 15.5135V15.592C70.5037 16.1413 70.6933 16.6055 71.0725 16.9848C71.4649 17.364 71.9226 17.5536 72.4457 17.5536Z"
        fill="#979ABE"
      />
      <path
        d="M80.1638 7H86.0292C87.4415 7 88.6905 7.28117 89.7759 7.84351C90.8744 8.40584 91.7245 9.1905 92.326 10.1975C92.9407 11.2045 93.248 12.3553 93.248 13.65C93.248 15.01 92.9472 16.2066 92.3457 17.2398C91.7572 18.2729 90.9137 19.0772 89.8151 19.6526C88.7297 20.2149 87.4677 20.4961 86.0292 20.4961H80.1638V7ZM85.833 16.9652C86.8138 16.9652 87.5592 16.6578 88.0693 16.0432C88.5924 15.4155 88.8539 14.6046 88.8539 13.6107C88.8539 12.6692 88.5989 11.9237 88.0889 11.3745C87.5919 10.8121 86.84 10.531 85.833 10.531H84.4991V16.9652H85.833Z"
        fill="#979ABE"
      />
      <path
        d="M99.1854 20.653C98.3353 20.653 97.5376 20.4307 96.7921 19.9861C96.0598 19.5284 95.4713 18.9137 95.0267 18.1421C94.582 17.3575 94.3597 16.4878 94.3597 15.5332C94.3597 14.5916 94.582 13.7415 95.0267 12.983C95.4713 12.2114 96.0663 11.6099 96.8118 11.1783C97.5572 10.7467 98.3484 10.531 99.1854 10.531C99.8654 10.531 100.493 10.7206 101.069 11.0998C101.657 11.4791 102.102 12.048 102.402 12.8065V10.531H106.522V20.4961H102.402V18.6718C101.749 19.9926 100.676 20.653 99.1854 20.653ZM100.46 17.5536C100.984 17.5536 101.428 17.3706 101.794 17.0044C102.174 16.6251 102.376 16.1805 102.402 15.6705V15.5135C102.376 14.9904 102.167 14.5458 101.775 14.1796C101.395 13.8134 100.957 13.6304 100.46 13.6304C99.9112 13.6304 99.4404 13.8265 99.048 14.2189C98.6688 14.5981 98.4792 15.0558 98.4792 15.592C98.4792 16.1413 98.6753 16.6055 99.0677 16.9848C99.46 17.364 99.9242 17.5536 100.46 17.5536Z"
        fill="#979ABE"
      />
      <path
        d="M108.509 10.8056H112.648V12.5122C113.276 11.1914 114.341 10.531 115.845 10.531C116.722 10.531 117.526 10.7533 118.258 11.1979C119.004 11.6295 119.586 12.2311 120.004 13.0026C120.436 13.7742 120.651 14.6373 120.651 15.592C120.651 16.5467 120.429 17.4098 119.984 18.1814C119.553 18.953 118.964 19.5611 118.219 20.0057C117.487 20.4373 116.702 20.653 115.865 20.653C114.374 20.653 113.302 19.9926 112.648 18.6718V23.0462L108.509 23.8309V10.8056ZM114.61 17.5536C115.146 17.5536 115.603 17.3575 115.983 16.9652C116.362 16.5728 116.552 16.1151 116.552 15.592C116.552 15.0427 116.355 14.5785 115.963 14.1992C115.584 13.82 115.133 13.6304 114.61 13.6304C114.073 13.6304 113.616 13.82 113.236 14.1992C112.857 14.5654 112.668 15.0035 112.668 15.5135V15.592C112.668 16.1413 112.857 16.6055 113.236 16.9848C113.629 17.364 114.086 17.5536 114.61 17.5536Z"
        fill="#979ABE"
      />
    </g>
  </svg>
);
